// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  firstName     String
  lastName      String
  password      String
  role          UserRole    @default(USER)
  status        UserStatus  @default(PENDING_VERIFICATION)
  googleId      String?     @unique
  phoneNumber   String?     // For WhatsApp integration
  emailVerified Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  lastLoginAt   DateTime?
  
  // Relations
  refreshTokens RefreshToken[]
  wallet        Wallet?
  sentRequests  MoneyRequest[] @relation("RequestSender")
  receivedRequests MoneyRequest[] @relation("RequestReceiver")
  notifications Notification[]
  
  @@map("users")
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Decimal  @default(100) // 100 G coins = $100 USD
  currency  String   @default("G_COIN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  @@map("wallets")
}

model Transaction {
  id          String        @id @default(cuid())
  walletId    String
  type        TransactionType
  amount      Decimal
  description String
  reference   String?       // External reference (e.g., transaction ID)
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model MoneyRequest {
  id          String        @id @default(cuid())
  requesterId String        // Who is requesting the money
  fromUserId  String        // Who is being asked for money
  amount      Decimal
  description String
  status      MoneyRequestStatus @default(PENDING)
  viaWhatsApp Boolean       @default(false)
  senderPhone String?       // Phone number for WhatsApp notification
  rejectionReason String?   // Reason if rejected
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  requester User @relation("RequestReceiver", fields: [requesterId], references: [id], onDelete: Cascade)
  fromUser  User @relation("RequestSender", fields: [fromUserId], references: [id], onDelete: Cascade)
  
  @@map("money_requests")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  metadata  Json?    // Store additional data as JSON
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

enum UserRole {
  USER
  ADMIN
  CHECKER
  AUDITOR
  COMPLIANCE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum TransactionType {
  CREDIT
  DEBIT
  TRANSFER
  WITHDRAWAL
  DEPOSIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum MoneyRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum NotificationType {
  EMAIL
  ACCOUNT
  TRANSACTION
  SYSTEM
}
